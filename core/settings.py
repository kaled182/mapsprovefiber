"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from celery.schedules import crontab
#from whitenoise import WhiteNoise
#from core import MyWSGIApp
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(parents=True, exist_ok=True)

# Configure django-environ
env = environ.Env(
    DEBUG=(bool, False)  # type and default value
)

# Load .env only when present (production may rely on real environment variables)
ENV_FILE = BASE_DIR / ".env"
if ENV_FILE.exists():
    environ.Env.read_env(ENV_FILE)

# WhiteNoise configuration


# Zabbix API defaults (overridden via setup panel)
ZABBIX_API_URL = env('ZABBIX_API_URL', default='')
ZABBIX_API_USER = env('ZABBIX_API_USER', default='')
ZABBIX_API_PASSWORD = env('ZABBIX_API_PASSWORD', default='')
ZABBIX_API_KEY = env('ZABBIX_API_KEY', default='')

# Google Maps (default value)
GOOGLE_MAPS_API_KEY = env('GOOGLE_MAPS_API_KEY', default='')

# Zabbix read-only enforcement (blocks write operations through zabbix_request)
ZABBIX_READ_ONLY = env.bool('ZABBIX_READ_ONLY', default=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1', 'testserver'])
# Garantir inclus√£o de 'testserver' para testes internos (Django test client)
if 'testserver' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('testserver')
ENABLE_DIAGNOSTIC_ENDPOINTS = env.bool('ENABLE_DIAGNOSTIC_ENDPOINTS', default=False)


CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

# HTTPS hardening (enable when deploying behind HTTPS)
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XSS_FILTER = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# Include additional app-level static directories explicitly if not auto-discovered
STATICFILES_DIRS = [
    BASE_DIR / 'maps_view' / 'static',
    BASE_DIR / 'routes_builder' / 'static',  # added so fiber_route_builder JS & partials are collected
    BASE_DIR / 'setup_app' / 'static',       # added for setup-specific assets
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Application definition

INSTALLED_APPS = [
    'django_prometheus',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'maps_view',
    'zabbix_api',
    'setup_app',
    'routes_builder',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'setup_app.context_processors.setup_logo',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES: dict[str, dict] = {}

database_url = env("DATABASE_URL", default=None)
if database_url:
    DATABASES["default"] = env.db("DATABASE_URL")
else:
    engine = env("DATABASE_ENGINE", default=None)
    if engine:
        DATABASES["default"] = {
            "ENGINE": engine,
            "NAME": env("DATABASE_NAME", default=""),
            "USER": env("DATABASE_USER", default=""),
            "PASSWORD": env("DATABASE_PASSWORD", default=""),
            "HOST": env("DATABASE_HOST", default="127.0.0.1"),
            "PORT": env("DATABASE_PORT", default="3306"),
            "OPTIONS": {"charset": env("DATABASE_CHARSET", default="utf8mb4")},
        }
    else:
        DATABASES["default"] = {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }

if DATABASES["default"]["ENGINE"] != "django.db.backends.sqlite3":
    DATABASES["default"]["CONN_MAX_AGE"] = env.int("DATABASE_CONN_MAX_AGE", default=60)

DATABASES["legacy"] = {
    "ENGINE": "django.db.backends.sqlite3",
    "NAME": BASE_DIR / "db.sqlite3",
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Auth redirects
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/maps_view/dashboard/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL", "redis://127.0.0.1:6379/0"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 50},
        },
        "TIMEOUT": 60,
    }
}

FERNET_KEYS = env.list('FERNET_KEYS', default=[])
if not FERNET_KEYS:
    single_fernet = env('FERNET_KEY', default=None)
    if single_fernet:
        FERNET_KEYS = [single_fernet]
if not FERNET_KEYS:
    FERNET_KEYS = [SECRET_KEY]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "[%(levelname)s] %(name)s: %(message)s"},
        "verbose": {"format": "%(asctime)s %(levelname)s %(name)s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": str(LOG_DIR / "application.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 5,
        },
    },
    "loggers": {
        "django": {"handlers": ["console", "file"], "level": "INFO"},
        "zabbix_api": {"handlers": ["console", "file"], "level": "DEBUG"},
        "maps_view": {"handlers": ["console", "file"], "level": "INFO"},
        "routes_builder": {"handlers": ["console", "file"], "level": "INFO"},
        "celery": {"handlers": ["console", "file"], "level": "INFO"},
        "django_prometheus": {"handlers": ["console", "file"], "level": "INFO"},
        "requests": {"handlers": ["console", "file"], "level": "WARNING"},
    },
}

channel_layer_url = env("CHANNEL_LAYER_URL", default="").strip()
if channel_layer_url:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": [channel_layer_url]},
        }
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        }
    }
# Celery / Redis
CELERY_BROKER_URL = os.environ.get("REDIS_URL", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_TASK_DEFAULT_QUEUE = "mapspro_default"
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_ALWAYS_EAGER = False
CELERY_BEAT_SCHEDULE = {
    "warm-optical-snapshots": {
        "task": "zabbix_api.tasks.warm_all_optical_snapshots",
        "schedule": crontab(minute="*/10"),
        "options": {"queue": "mapspro_default"},
    },
    "broadcast-dashboard-status": {
        "task": "maps_view.tasks.broadcast_dashboard_snapshot",
        "schedule": crontab(minute="*"),
        "options": {"queue": "mapspro_default"},
    },
}
